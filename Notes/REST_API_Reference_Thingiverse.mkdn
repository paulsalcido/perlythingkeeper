# Developers - REST API Reference - Thingiverse
## Thingiverse REST API Reference


* ### Users


* #### Get the specified user

```
GET /users/{$username}/
```
##### Parameters
```

- **$username** - Required string - The username of the
user to get. Use the special name "me" to get information about the
current user.

```
##### Returns
```

- **(object)** - The user.

```

*                 <a name="users-patch"></a>
#### Update the user's profile
```
PATCH /users/{$username}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```

- **first_name** - string - Optional. Replace the first
name of this user.
- **last_name** - string - Optional. Replace the last name
of this user.
- **bio** - string - Optional. Replace the biography for
this user.
- **location** - string - Optional. Replace the location
for this user.
- **default_license** - string - Optional. One of cc, cc-sa, cc-nd, cc-nc, cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Update default license.

```
##### Parameters
```

- **$username** - Required integer - The username of the
user to update

```
##### Returns
```

- **(object)** - The updated user.

```

*                 <a name="users-getthings"></a>
#### Get things by user
```
GET /users/{$username}/things
```
<p>If an authenticated user is requesting their own list of things,
unpublished things will also appear in the list. If the user doesn't
exist, result is 404 Not Found.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user for which to fetch things.

```
##### Returns
```

- **(array)** - Thing objects

```

*                 <a name="users-getlikes"></a>
#### Get things like by user
```
GET /users/{$username}/likes
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user for which to fetch likes.

```
##### Returns
```

- **(array)** - Thing objects

```

*                 <a name="users-getcopies"></a>
#### Get latest copies by user
```
GET /users/{$username}/copies
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user for which to fetch copies.

```
##### Returns
```

- **(array)** - Copy objects

```

*                 <a name="users-getcollections"></a>
#### Get latest collections by user
```
GET /users/{$username}/collections
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user for which to fetch collections.

```
##### Returns
```

- **(array)** - Collection objects

```

*                 <a name="users-getdownloads"></a>
#### Get latest downloaded things by user
```
GET /users/{$username}/downloads
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user in question.

```
##### Returns
```

- **(array)** - Thing objects

```

*                 <a name="users-postfollowers"></a>
#### Follow an user
```
POST /users/{$username}/followers
```
<p>Must use the POST method Result will be 404 Not Found if the user
doesn't exist. Result will be 400 Bad Request if the user is trying to
follow itself.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user to "follow".

```
##### Returns
```

- **(object)** - The "ok" object.

```

*                 <a name="users-deletefollowers"></a>
#### Unfollow an user
```
DELETE /users/{$username}/followers
```
<p>Must use the DELETE method Result will be 404 Not Found if the user
doesn't exist.</p>
##### Parameters
```

- **$username** - Required string - The username of the
user to "unfollow".

```
##### Returns
```

- **(object)** - The "ok" object.

```

*                 <a name="users-postavatarimage"></a>
#### Update the avatar image
```
POST /users/{$username}/avatarimage
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **filename** - string - Set the name of the image to
upload.

```
##### Parameters
```

- **$username** - Required string - The username of the
user that will own this file.

```
##### Returns
```

- **(object)** - The data needed to upload a file via an
HTTP POST with multipart/form-data encoding.

```

*                 <a name="users-postcoverimage"></a>
#### Update the cover image
```
POST /users/{$username}/coverimage
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **filename** - string - Set the name of the image to
upload.

```
##### Parameters
```

- **$username** - Required string - The username of the
user that will own this file.

```
##### Returns
```

- **(object)** - The data needed to upload a file via an
HTTP POST with multipart/form-data encoding.

```



*             <a name="things"></a>
### Things

*                 <a name="things-get"></a>
#### Get thing by id
```
GET /things/{$id}/
```
<p>Attempting to fetch an unpublished thing will result in a 401
Unauthorized result unless the call is authenticated. Attempting to fetch
an unpublished thing you do not own will result in a 403 Forbidden.
Invalid or deleted things will result in 404 Not Found.</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to
get

```
##### Returns
```

- **(object)** - An object representing the thing
requested

```

*                 <a name="things-getimages"></a>
#### Get image(s) by thing
```
GET /things/{$id}/images/{$image_id}
```
<p>Gets summary information for all images associated with a thing or
more detailed information about a specific image.</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
images from
- **$image_id** - Optional integer - Optional id of image
to get details for

```
##### Returns
```

- **(array|object)** - An array of images associated with
a thing or detailed info about a specific image.

```

*                 <a name="things-patchimages"></a>
#### Update an existing image
```
PATCH /things/{$id}/images/{$image_id}
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```

- **rank** - integer - Optional.
- **featured** - boolean - Optional.

```
##### Parameters
```

- **$id** - Required -
- **$image_id** - Required -

```
##### Returns
```

- **(object)** - The "ok" object

```

*                 <a name="things-deleteimages"></a>
#### Delete an image from a thing
```
DELETE /things/{$id}/images/{$image_id}
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```

- **$id** - Required integer - The id of the Thing the
image belongs to
- **$image_id** - Required integer - The id of the image
to delete.

```
##### Returns
```

- **(object)** - The "ok" object

```

*                 <a name="things-getfiles"></a>
#### Get file(s) by thing
```
GET /things/{$id}/files/{$file_id}
```
<p>Get a list of files associated with a thing or, given a numeric id,
gets more detailed info about a specific file belonging to this
thing.</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
files from
- **$file_id** - Optional integer - Optional id of the
file to get more details for

```
##### Returns
```

- **(array|object)** - An array of files associated with a
thing or detail about a specific file

```

*                 <a name="things-deletefiles"></a>
#### Delete a file from a thing
```
DELETE /things/{$id}/files/{$file_id}
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```

- **$id** - Required integer - The id of the Thing the
file belongs to
- **$file_id** - Required integer - The id of the file to
delete.

```
##### Returns
```

- **(object)** - The "ok" object

```

*                 <a name="things-getlikes"></a>
#### Get users who liked this thing
```
GET /things/{$id}/likes
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
likes from

```
##### Returns
```

- **(array)** - An array of users who liked this
thing

```

*                 <a name="things-getancestors"></a>
#### Get a list of thing ancestors
```
GET /things/{$id}/ancestors
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
ancestors of

```
##### Returns
```

- **(array)** - An array containing a list of things this
thing is derived from

```

*                 <a name="things-getderivatives"></a>
#### Get a list of thing derivatives
```
GET /things/{$id}/derivatives
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
derivatives for

```
##### Returns
```

- **(array)** - An array containing a list of things that
derive from this thing

```

*                 <a name="things-gettags"></a>
#### Get tags on this thing
```
GET /things/{$id}/tags
```
##### Parameters
```

- **$id** - Required integer - The id of the thing for
which to list tags

```
##### Returns
```

- **(array)** - An array containing a list of things that
derive from this thing

```

*                 <a name="things-getcategories"></a>
#### Get thing category
```
GET /things/{$id}/categories
```
##### Parameters
```

- **$id** - Required integer - The id of the thing for
which to list it's categories

```
##### Returns
```

- **(array)** - An array containing a list of categories
this thing is in

```

*                 <a name="things-patch"></a>
#### Update an existing thing
```
PATCH /things/{$id}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```

- **name** - string - Optional. Replace the name of the
thing
- **license** - string - Optional. One of cc, cc-sa,
cc-nd, cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Replace license.
- **category** - string - Optional. Replace the category
of the thing. Uses full category name (eg: "3D Printer Parts")
- **description** - string - Optional. Replace the
description.
- **instructions** - string - Optional. Replace the
instructions.
- **is_wip** - boolean - Optional. Toggle whether this
thing is a work in progress.
- **tags** - array - Optional. An array of strings
containing tag names. Replaces all current tags.

```
##### Parameters
```

- **$id** - Required integer - The id of the thing to
update

```
##### Returns
```

- **(object)** - The updated thing.

```

*                 <a name="things-post"></a>
#### Create a new thing
```
POST /things/
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **name** - string - Set the name of the thing
- **license** - string - One of cc, cc-sa, cc-nd,
cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Set license.
- **category** - string - Set the category of the thing.
Uses full category name (eg: "3D Printer Parts")
- **description** - string - Optional. Set the
description.
- **instructions** - string - Optional. Set the
instructions.
- **is_wip** - boolean - Optional. Toggle whether this
thing is a work in progress. Default is false.
- **tags** - array - Optional. An array of strings
containing tag names. Sets all current tags.
- **ancestors** - array - Optional. An array of thing ids
that this thing is derived from.

```
##### Returns
```

- **(object)** - The newly created thing.

```

*                 <a name="things-delete"></a>
#### Delete a thing
```
DELETE /things/{$id}/
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to
delete.

```
##### Returns
```

- **(object)** - The "ok" object

```

*                 <a name="things-postfiles"></a>
#### Upload a file to the given thing
```
POST /things/{$id}/files
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **filename** - string - Set the name of the file to
upload.

```
##### Parameters
```

- **$id** - Required integer - The id of the thing that
will own this file.

```
##### Returns
```

- **(object)** - The data needed to upload a file via an
HTTP POST with multipart/form-data encoding.

```

*                 <a name="things-postpublish"></a>
#### Publish a thing
```
POST /things/{$id}/publish
```
<p>If the Thing cannot be published (for example, because the Thing's
name or description is blank), returns an HTTP status of 400 Bad Request
and a body containing a JSON object of the form: {"errors":["&lt;%=
reason %&gt;", ...]} Must use the POST method</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to
publish.

```
##### Returns
```

- **(object)** - The published Thing or an object
containing an array named "errors".

```

*                 <a name="things-getcopies"></a>
#### Get copies/makes of a thing
```
GET /things/{$id}/copies
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
copies from

```
##### Returns
```

- **(array)** - An array of copies (and their images)
associated with a thing

```

*                 <a name="things-postcopies"></a>
#### Upload image for new copy
```
POST /things/{$id}/copies
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **filename** - string - The name of the image file to
upload.

```
##### Parameters
```

- **$id** - Required integer - The id of the thing that
gets the new copy.

```
##### Returns
```

- **(object)** - The data needed to upload this copy's
image file via an HTTP POST with multipart/form-data encoding.

```

*                 <a name="things-postlikes"></a>
#### Like a thing
```
POST /things/{$id}/likes
```
<p>Must use the POST method Result will be 404 Not Found if the thing
doesn't exist. Result will be 400 Bad Request if the user is trying to
like their own thing.</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to
like.

```
##### Returns
```

- **(object)** - The "ok" object.

```

*                 <a name="things-deletelikes"></a>
#### Delete a like
```
DELETE /things/{$id}/likes
```
<p>Must use the DELETE method Result will be 404 Not Found if the thing
doesn't exist. Result will be 400 Bad Request if the user is trying to
"unlike" their own thing.</p>
##### Parameters
```

- **$id** - Required integer - The id of the thing to
"unlike".

```
##### Returns
```

- **(object)** - The "ok" object.

```

*                 <a name="things-getpackageurl"></a>
#### Get a ZIP package with all files associated with the thing
```
GET /things/{$id}/packageurl
```
##### Parameters
```

- **$id** - Required integer - The id of the Thing the
package belongs to

```
##### Returns
```

- **(string)** - The "url" object

```

*                 <a name="things-getprints"></a>
#### Get a list of prints associated with a thing
```
GET /things/{$id}/prints
```
##### Parameters
```

- **$id** - Required integer - $id The id of the thing to
get prints from

```
##### Returns
```

- **(array)** - An array of prints associated with a
thing

```

*                 <a name="things-getthreadedcomments"></a>
#### Get all comments for this thing in a quick pre-threaded view. This is
an alternative to GET /things/id/comments
```
GET /things/{$id}/threadedcomments
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to
get

```
##### Returns
```

- **(object)** - An array containing comment threads
indexed by comment parent id (blank for top level comments) and users
indexed by user id used in those comments

```

*                 <a name="things-getcomments"></a>
#### Get an unthreaded paginated list of comment objects. See also GET
/things/id/threaded_comments
```
GET /things/{$id}/comments
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to get
comments for

```
##### Returns
```

- **(array)** - An array containing a list of comments on
this thing

```

*                 <a name="things-postcomments"></a>
#### Post a comment
```
POST /things/{$id}/comments
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to
comment on

```
##### Returns
```

- **(object)** - The newly created comment

```



*             <a name="files"></a>
### Files

*                 <a name="files-get"></a>
#### Get info about a file by id
```
GET /files/{$id}/
```
<p>Get basic information about how to access a file. For relevant files,
a thumbnail image or three.js json file may be available.</p>
##### Parameters
```

- **$id** - Required integer - The id of the file

```
##### Returns
```

- **(object)** - An object with urls of the file
requested

```

*                 <a name="files-postfinalize"></a>
#### Finalize an uploaded file
```
POST /files/{$id}/finalize
```
<p>Must use the POST method</p>
##### Parameters
```

- **$id** - Required integer - The id of the PendingUpload
for this file

```
##### Returns
```

- **(object)** - Summary of the ObjectFile or Image that
was created, or error.

```

*                 <a name="files-getdownload"></a>
#### Get tracked download URL
```
GET /files/{$id}/download
```
<p>Redirects to the requested file and adds an entry to the user's
download history for use with the GET /users/{$username}/downloads
endpoint, as opposed to the public url which is anonymous.</p>
##### Parameters
```

- **$id** - Required integer - The id of the file

```
##### Returns
```

- NONE

```



*             <a name="copies"></a>
### Copies

*                 <a name="copies-get"></a>
#### Get copy by id
```
GET /copies/{$id}/
```
<p>If no id is given, gets the list of latest copies.</p>
##### Parameters
```

- **$id** - Optional integer - The id of the copy to get.
Omit this to get the list of the latest copies.

```
##### Returns
```

- **(object|array)** - An object representing the copy
requested, or an array of copy objects.

```

*                 <a name="copies-getimages"></a>
#### Get images for a copy
```
GET /copies/{$id}/images
```
##### Parameters
```

- **$id** - Required integer - The id of the copy to get
images from

```
##### Returns
```

- **(array)** - An array of images associated with the
copy

```

*                 <a name="copies-postimages"></a>
#### Upload image to a copy
```
POST /copies/{$id}/images
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **filename** - string - The name of the image file to
upload.

```
##### Parameters
```

- **$id** - Required integer - The id of the copy.

```
##### Returns
```

- **(object)** - The data needed to upload this copy's
image file via an HTTP POST with multipart/form-data encoding.

```

*                 <a name="copies-patchimages"></a>
#### Update an existing image
```
PATCH /copies/{$id}/images/{$image_id}
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```

- **rank** - integer - Optional.
- **featured** - boolean - Optional.

```
##### Parameters
```

- **$id** - Required -
- **$image_id** - Required -

```
##### Returns
```

- **(object)** - The "ok" object

```

*                 <a name="copies-deleteimages"></a>
#### Delete an image from a copy
```
DELETE /copies/{$id}/images/{$image_id}
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```

- **$id** - Required integer - The id of the Copy the
image belongs to
- **$image_id** - Required integer - The id of the image
to delete.

```
##### Returns
```

- **(object)** - The "ok" object

```

*                 <a name="copies-patch"></a>
#### Update an existing copy
```
PATCH /copies/{$id}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```

- **description** - string - Optional. Replace the
description.

```
##### Parameters
```

- **$id** - Required integer - The id of the copy to
update

```
##### Returns
```

- **(object)** - The updated thing.

```

*                 <a name="copies-delete"></a>
#### Delete a copy
```
DELETE /copies/{$id}/
```
##### Parameters
```

- **$id** - Required integer - The id of the copy.

```
##### Returns
```

- NONE

```

*                 <a name="copies-postlikes"></a>
#### Like a copy
```
POST /copies/{$id}/likes
```
<p>Must use the POST method Result will be 404 Not Found if the copy
doesn't exist. Result will be 400 Bad Request if the user is trying to
like their own copy.</p>
##### Parameters
```

- **$id** - Required integer - The id of the copy to
like.

```
##### Returns
```

- **(object)** - The "ok" object.

```

*                 <a name="copies-deletelikes"></a>
#### Delete a like
```
DELETE /copies/{$id}/likes
```
<p>Must use the DELETE method Result will be 404 Not Found if the copy
doesn't exist. Result will be 400 Bad Request if the user is trying to
"unlike" their own copy.</p>
##### Parameters
```

- **$id** - Required integer - The id of the copy to
"unlike".

```
##### Returns
```

- **(object)** - The "ok" object.

```

*                 <a name="copies-getthreadedcomments"></a>
#### Get all comments for this copy in a quick pre-threaded view. This is
an alternative to GET /copies/id/comments
```
GET /copies/{$id}/threadedcomments
```
##### Parameters
```

- **$id** - Required integer - The id of the thing to
get

```
##### Returns
```

- **(object)** - An array containing comment threads
indexed by comment parent id (blank for top level comments) and users
indexed by user id used in those comments

```

*                 <a name="copies-getcomments"></a>
#### Get an unthreaded paginated list of comment objects. See also GET
/copies/id/threaded_comments
```
GET /copies/{$id}/comments
```
##### Parameters
```

- **$id** - Required integer - The id of the copy to get
comments for

```
##### Returns
```

- **(array)** - An array containing a list of comments on
this copy

```

*                 <a name="copies-postcomments"></a>
#### Post a comment
```
POST /copies/{$id}/comments
```
##### Parameters
```

- **$id** - Required integer - The id of the copy to
comment on

```
##### Returns
```

- **(object)** - The newly created comment

```



*             <a name="collections"></a>
### Collections

*                 <a name="collections-get"></a>
#### Get a collection by id
```
GET /collections/{$id}/
```
<p>If no id is given, gets the list of the latest collections.</p>
##### Parameters
```

- **$id** - Optional integer - The id of the collection to
get. Omit to get the latest collections.

```
##### Returns
```

- **(object|array)** - An array of objects, or a single
object

```

*                 <a name="collections-getthings"></a>
#### Get Things in a collection
```
GET /collections/{$id}/things
```
##### Parameters
```

- **$id** - Required integer - The id of the collection to
get Things from

```
##### Returns
```

- **(array)** - An array of Things in this collection

```

*                 <a name="collections-post"></a>
#### Create a new collection
```
POST /collections/
```
##### Body Parameters
```

- **name** - string - Name of the collection
- **description** - string - Optional. Description of the
collection

```
##### Returns
```

- **(object)** - The newly created collection.

```

*                 <a name="collections-postthing"></a>
#### Add a thing to a collection
```
POST /collections/{$collection_id}/thing/{$thing_id}
```
<p>Apps can add to any collection the user owns. Do not abuse or we'll
change that. :)</p>
##### Body Parameters
```

- **description** - string - Optional. Reason for adding
the Thing

```
##### Parameters
```

- **$collection_id** - Required integer - Id of the
collection to add to
- **$thing_id** - Required integer - Id of the Thing to
add

```
##### Returns
```

- **(The)** - "ok" object.

```

*                 <a name="collections-deletething"></a>
#### Removes a thing from a collection
```
DELETE /collections/{$collection_id}/thing/{$thing_id}
```
<p>Apps may only remove things that they've added to a collection.</p>
##### Parameters
```

- **$collection_id** - Required -
- **$thing_id** - Required -

```
##### Returns
```

- **(The)** - "ok" object.

```

*                 <a name="collections-patch"></a>
#### Update a collection
```
PATCH /collections/{$id}/
```
<p>Apps can only update collections they've created.</p>
##### Body Parameters
```

- **name** - string - Name of the collection
- **description** - string - Optional. Description of the
collection

```
##### Parameters
```

- **$id** - Required -

```
##### Returns
```

- **(object)** - The newly created collection.

```

*                 <a name="collections-delete"></a>
#### Delete a collection
```
DELETE /collections/{$id}/
```
<p>Apps can only delete collections they've created.</p>
##### Parameters
```

- **$id** - Required integer - Id of the collection to
delete

```
##### Returns
```

- NONE

```



*             <a name="comments"></a>
### Comments

*                 <a name="comments-get"></a>
#### Get comment by id
```
GET /comments/{$id}/
```
<p>If no id is given, gets the list of the latest comments.</p>
##### Parameters
```

- **$id** - Required integer - The id of the comment to
get

```
##### Returns
```

- **(object)** - An object representing the comment
requested

```

*                 <a name="comments-post"></a>
#### Create a new comment
```
POST /comments/
```
<p>Must use the POST method</p>
##### Body Parameters
```

- **body** - string - Set the body of the comment
- **target_type** - string - Either thing or make
- **target_id** - integer - The id of the target (thing_id
or make_id)

```
##### Returns
```

- **(object)** - The newly created comment.

```

*                 <a name="comments-patch"></a>
#### Update an existing comment
```
PATCH /comments/{$id}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```

- **body** - string - Replace the body of the thing

```
##### Parameters
```

- **$id** - Required integer - The id of the comment to
update

```
##### Returns
```

- **(object)** - The updated comment.

```

*                 <a name="comments-delete"></a>
#### Delete a comment
```
DELETE /comments/{$id}/
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```

- **$id** - Required integer - The id of the comment to
delete.

```
##### Returns
```

- **(object)** - The "ok" object

```



*             <a name="newest"></a>
### Newest

*                 <a name="newest-get"></a>
#### Get the latest things published
```
GET /newest/
```
##### Returns
```

- **(array)** - Thing objects

```



*             <a name="popular"></a>
### Popular

*                 <a name="popular-get"></a>
#### Get the latest featured things
```
GET /popular/
```
##### Returns
```

- NONE

```



*             <a name="featured"></a>
### Featured

*                 <a name="featured-get"></a>
#### Get the latest featured things
```
GET /featured/
```
##### Returns
```

- NONE

```



*             <a name="search"></a>
### Search

*                 <a name="search-get"></a>
#### Perform a search of things by keyword
```
GET /search/{$term}/
```
<p>Results in 404 Not Found if no things match the search.</p>
##### Parameters
```

- **$term** - Optional string - The search query to
perform

```
##### Returns
```

- **(array)** - A list of things matching the search

```

*                 <a name="search-getlibrary"></a>
```
GET /search/{$term}/library
```
##### Parameters
```

- **$term** - Optional -

```
##### Returns
```

- NONE

```



*             <a name="categories"></a>
### Categories

*                 <a name="categories-get"></a>
#### Get category or categories
```
GET /categories/{$category_slug}/
```
<p>Get details about one category or a list of all categories. Category
ids are normalized "slugs". For example, the id for the "Automotive"
category's id would be "automotive". The "Replacement Parts" category
would have an id of "replacement-parts", etc. If no id is specified,
returns paginated list of categories.</p>
##### Parameters
```

- **$category_slug** - Optional string - The id of the
category to fetch. Omit for list of categories.

```
##### Returns
```

- **(object|array)** - The category (if specified) or list
of categories

```

*                 <a name="categories-getthings"></a>
#### Get latest things in a category
```
GET /categories/{$category_slug}/things
```
<p>If the category doesn't exist, result is 404 Not Found. Category ids
are normalized "slugs". For example, the id for the "Automotive"
category's id would be "automotive". The "Replacement Parts" category
would have an id of "replacement-parts", etc.</p>
##### Parameters
```

- **$category_slug** - Required string - The id of the
category for which to fetch things

```
##### Returns
```

- **(array)** - Thing objects

```



*             <a name="tags"></a>
### Tags

*                 <a name="tags-getthings"></a>
#### Get the latest things with the specified tag
```
GET /tags/{$tag}/things
```
<p>If the tag doesn't exist, result is 404 Not Found. Tags are normalized
before searching by converting whitespace to underscores and stripping
out all characters except alphanumerics, underscores, and dashes
('-').</p>
##### Parameters
```

- **$tag** - Required string - The tag for which to fetch
things

```
##### Returns
```

- **(array)** - Thing objects

```

*                 <a name="tags-get"></a>
#### Return a representation of the given tag
```
GET /tags/{$tag}/
```
<p>Tags are normalized before searching by converting whitespace to
underscores and stripping out all characters except alphanumerics,
underscores, and dashes ('-'). If no tag is specified, returns a list of
all tags in alphabetical order.</p>
##### Parameters
```

- **$tag** - Optional string - The tag for which to fetch
things. Omit this to get the list of tags.

```
##### Returns
```

- **(object|array)** - The tag or an array of tags.

```




### Index

- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#users">USERS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#things">THINGS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#files">FILES</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#copies">COPIES</a>
- <a href=
"./Developers%20-%20REST%20API%20Reference%20-%20Thingiverse_files/Developers%20-%20REST%20API%20Reference%20-%20Thingiverse.html">
COLLECTIONS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#comments">COMMENTS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#newest">NEWEST</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#popular">POPULAR</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#featured">FEATURED</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#search">SEARCH</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#categories">CATEGORIES</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#tags">TAGS</a>

</body>
</html>
