# Developers - REST API Reference - Thingiverse
## Thingiverse REST API Reference
<ul id="api-list">
*             <a name="users"></a>
### Users
<ul class="methods">
*                 <a name="users-get"></a>
#### Get the specified user
```
GET /users/{$username}/
```
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user to get. Use the special name "me" to get information about the
current user.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The user.
</ul>
```

*                 <a name="users-patch"></a>
#### Update the user's profile
```
PATCH /users/{$username}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **first_name** - string - Optional. Replace the first
name of this user.
- **last_name** - string - Optional. Replace the last name
of this user.
- **bio** - string - Optional. Replace the biography for
this user.
- **location** - string - Optional. Replace the location
for this user.
- **default_license** - string - Optional. One of cc, cc-sa, cc-nd, cc-nc, cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Update default license.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required integer - The username of the
user to update
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The updated user.
</ul>
```

*                 <a name="users-getthings"></a>
#### Get things by user
```
GET /users/{$username}/things
```
<p>If an authenticated user is requesting their own list of things,
unpublished things will also appear in the list. If the user doesn't
exist, result is 404 Not Found.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user for which to fetch things.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Thing objects
</ul>
```

*                 <a name="users-getlikes"></a>
#### Get things like by user
```
GET /users/{$username}/likes
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user for which to fetch likes.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Thing objects
</ul>
```

*                 <a name="users-getcopies"></a>
#### Get latest copies by user
```
GET /users/{$username}/copies
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user for which to fetch copies.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Copy objects
</ul>
```

*                 <a name="users-getcollections"></a>
#### Get latest collections by user
```
GET /users/{$username}/collections
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user for which to fetch collections.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Collection objects
</ul>
```

*                 <a name="users-getdownloads"></a>
#### Get latest downloaded things by user
```
GET /users/{$username}/downloads
```
<p>If the user doesn't exist, result is 404 Not Found.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user in question.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Thing objects
</ul>
```

*                 <a name="users-postfollowers"></a>
#### Follow an user
```
POST /users/{$username}/followers
```
<p>Must use the POST method Result will be 404 Not Found if the user
doesn't exist. Result will be 400 Bad Request if the user is trying to
follow itself.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user to "follow".
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object.
</ul>
```

*                 <a name="users-deletefollowers"></a>
#### Unfollow an user
```
DELETE /users/{$username}/followers
```
<p>Must use the DELETE method Result will be 404 Not Found if the user
doesn't exist.</p>
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user to "unfollow".
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object.
</ul>
```

*                 <a name="users-postavatarimage"></a>
#### Update the avatar image
```
POST /users/{$username}/avatarimage
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **filename** - string - Set the name of the image to
upload.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user that will own this file.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The data needed to upload a file via an
HTTP POST with multipart/form-data encoding.
</ul>
```

*                 <a name="users-postcoverimage"></a>
#### Update the cover image
```
POST /users/{$username}/coverimage
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **filename** - string - Set the name of the image to
upload.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$username** - Required string - The username of the
user that will own this file.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The data needed to upload a file via an
HTTP POST with multipart/form-data encoding.
</ul>
```

</ul>

*             <a name="things"></a>
### Things
<ul class="methods">
*                 <a name="things-get"></a>
#### Get thing by id
```
GET /things/{$id}/
```
<p>Attempting to fetch an unpublished thing will result in a 401
Unauthorized result unless the call is authenticated. Attempting to fetch
an unpublished thing you do not own will result in a 403 Forbidden.
Invalid or deleted things will result in 404 Not Found.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
get
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - An object representing the thing
requested
</ul>
```

*                 <a name="things-getimages"></a>
#### Get image(s) by thing
```
GET /things/{$id}/images/{$image_id}
```
<p>Gets summary information for all images associated with a thing or
more detailed information about a specific image.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
images from
- **$image_id** - Optional integer - Optional id of image
to get details for
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array|object)** - An array of images associated with
a thing or detailed info about a specific image.
</ul>
```

*                 <a name="things-patchimages"></a>
#### Update an existing image
```
PATCH /things/{$id}/images/{$image_id}
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **rank** - integer - Optional.
- **featured** - boolean - Optional.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required -
- **$image_id** - Required -
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

*                 <a name="things-deleteimages"></a>
#### Delete an image from a thing
```
DELETE /things/{$id}/images/{$image_id}
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the Thing the
image belongs to
- **$image_id** - Required integer - The id of the image
to delete.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

*                 <a name="things-getfiles"></a>
#### Get file(s) by thing
```
GET /things/{$id}/files/{$file_id}
```
<p>Get a list of files associated with a thing or, given a numeric id,
gets more detailed info about a specific file belonging to this
thing.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
files from
- **$file_id** - Optional integer - Optional id of the
file to get more details for
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array|object)** - An array of files associated with a
thing or detail about a specific file
</ul>
```

*                 <a name="things-deletefiles"></a>
#### Delete a file from a thing
```
DELETE /things/{$id}/files/{$file_id}
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the Thing the
file belongs to
- **$file_id** - Required integer - The id of the file to
delete.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

*                 <a name="things-getlikes"></a>
#### Get users who liked this thing
```
GET /things/{$id}/likes
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
likes from
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array of users who liked this
thing
</ul>
```

*                 <a name="things-getancestors"></a>
#### Get a list of thing ancestors
```
GET /things/{$id}/ancestors
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
ancestors of
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array containing a list of things this
thing is derived from
</ul>
```

*                 <a name="things-getderivatives"></a>
#### Get a list of thing derivatives
```
GET /things/{$id}/derivatives
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
derivatives for
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array containing a list of things that
derive from this thing
</ul>
```

*                 <a name="things-gettags"></a>
#### Get tags on this thing
```
GET /things/{$id}/tags
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing for
which to list tags
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array containing a list of things that
derive from this thing
</ul>
```

*                 <a name="things-getcategories"></a>
#### Get thing category
```
GET /things/{$id}/categories
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing for
which to list it's categories
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array containing a list of categories
this thing is in
</ul>
```

*                 <a name="things-patch"></a>
#### Update an existing thing
```
PATCH /things/{$id}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **name** - string - Optional. Replace the name of the
thing
- **license** - string - Optional. One of cc, cc-sa,
cc-nd, cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Replace license.
- **category** - string - Optional. Replace the category
of the thing. Uses full category name (eg: "3D Printer Parts")
- **description** - string - Optional. Replace the
description.
- **instructions** - string - Optional. Replace the
instructions.
- **is_wip** - boolean - Optional. Toggle whether this
thing is a work in progress.
- **tags** - array - Optional. An array of strings
containing tag names. Replaces all current tags.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
update
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The updated thing.
</ul>
```

*                 <a name="things-post"></a>
#### Create a new thing
```
POST /things/
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **name** - string - Set the name of the thing
- **license** - string - One of cc, cc-sa, cc-nd,
cc-nc-sa, cc-nc-nd, pd0, gpl, lgpl, bsd. Set license.
- **category** - string - Set the category of the thing.
Uses full category name (eg: "3D Printer Parts")
- **description** - string - Optional. Set the
description.
- **instructions** - string - Optional. Set the
instructions.
- **is_wip** - boolean - Optional. Toggle whether this
thing is a work in progress. Default is false.
- **tags** - array - Optional. An array of strings
containing tag names. Sets all current tags.
- **ancestors** - array - Optional. An array of thing ids
that this thing is derived from.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The newly created thing.
</ul>
```

*                 <a name="things-delete"></a>
#### Delete a thing
```
DELETE /things/{$id}/
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
delete.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

*                 <a name="things-postfiles"></a>
#### Upload a file to the given thing
```
POST /things/{$id}/files
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **filename** - string - Set the name of the file to
upload.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing that
will own this file.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The data needed to upload a file via an
HTTP POST with multipart/form-data encoding.
</ul>
```

*                 <a name="things-postpublish"></a>
#### Publish a thing
```
POST /things/{$id}/publish
```
<p>If the Thing cannot be published (for example, because the Thing's
name or description is blank), returns an HTTP status of 400 Bad Request
and a body containing a JSON object of the form: {"errors":["&lt;%=
reason %&gt;", ...]} Must use the POST method</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
publish.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The published Thing or an object
containing an array named "errors".
</ul>
```

*                 <a name="things-getcopies"></a>
#### Get copies/makes of a thing
```
GET /things/{$id}/copies
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
copies from
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array of copies (and their images)
associated with a thing
</ul>
```

*                 <a name="things-postcopies"></a>
#### Upload image for new copy
```
POST /things/{$id}/copies
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **filename** - string - The name of the image file to
upload.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing that
gets the new copy.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The data needed to upload this copy's
image file via an HTTP POST with multipart/form-data encoding.
</ul>
```

*                 <a name="things-postlikes"></a>
#### Like a thing
```
POST /things/{$id}/likes
```
<p>Must use the POST method Result will be 404 Not Found if the thing
doesn't exist. Result will be 400 Bad Request if the user is trying to
like their own thing.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
like.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object.
</ul>
```

*                 <a name="things-deletelikes"></a>
#### Delete a like
```
DELETE /things/{$id}/likes
```
<p>Must use the DELETE method Result will be 404 Not Found if the thing
doesn't exist. Result will be 400 Bad Request if the user is trying to
"unlike" their own thing.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
"unlike".
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object.
</ul>
```

*                 <a name="things-getpackageurl"></a>
#### Get a ZIP package with all files associated with the thing
```
GET /things/{$id}/packageurl
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the Thing the
package belongs to
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(string)** - The "url" object
</ul>
```

*                 <a name="things-getprints"></a>
#### Get a list of prints associated with a thing
```
GET /things/{$id}/prints
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - $id The id of the thing to
get prints from
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array of prints associated with a
thing
</ul>
```

*                 <a name="things-getthreadedcomments"></a>
#### Get all comments for this thing in a quick pre-threaded view. This is
an alternative to GET /things/id/comments
```
GET /things/{$id}/threadedcomments
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
get
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - An array containing comment threads
indexed by comment parent id (blank for top level comments) and users
indexed by user id used in those comments
</ul>
```

*                 <a name="things-getcomments"></a>
#### Get an unthreaded paginated list of comment objects. See also GET
/things/id/threaded_comments
```
GET /things/{$id}/comments
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to get
comments for
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array containing a list of comments on
this thing
</ul>
```

*                 <a name="things-postcomments"></a>
#### Post a comment
```
POST /things/{$id}/comments
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
comment on
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The newly created comment
</ul>
```

</ul>

*             <a name="files"></a>
### Files
<ul class="methods">
*                 <a name="files-get"></a>
#### Get info about a file by id
```
GET /files/{$id}/
```
<p>Get basic information about how to access a file. For relevant files,
a thumbnail image or three.js json file may be available.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the file
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - An object with urls of the file
requested
</ul>
```

*                 <a name="files-postfinalize"></a>
#### Finalize an uploaded file
```
POST /files/{$id}/finalize
```
<p>Must use the POST method</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the PendingUpload
for this file
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - Summary of the ObjectFile or Image that
was created, or error.
</ul>
```

*                 <a name="files-getdownload"></a>
#### Get tracked download URL
```
GET /files/{$id}/download
```
<p>Redirects to the requested file and adds an entry to the user's
download history for use with the GET /users/{$username}/downloads
endpoint, as opposed to the public url which is anonymous.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the file
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- NONE
</ul>
```

</ul>

*             <a name="copies"></a>
### Copies
<ul class="methods">
*                 <a name="copies-get"></a>
#### Get copy by id
```
GET /copies/{$id}/
```
<p>If no id is given, gets the list of latest copies.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Optional integer - The id of the copy to get.
Omit this to get the list of the latest copies.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object|array)** - An object representing the copy
requested, or an array of copy objects.
</ul>
```

*                 <a name="copies-getimages"></a>
#### Get images for a copy
```
GET /copies/{$id}/images
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy to get
images from
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array of images associated with the
copy
</ul>
```

*                 <a name="copies-postimages"></a>
#### Upload image to a copy
```
POST /copies/{$id}/images
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **filename** - string - The name of the image file to
upload.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The data needed to upload this copy's
image file via an HTTP POST with multipart/form-data encoding.
</ul>
```

*                 <a name="copies-patchimages"></a>
#### Update an existing image
```
PATCH /copies/{$id}/images/{$image_id}
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **rank** - integer - Optional.
- **featured** - boolean - Optional.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required -
- **$image_id** - Required -
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

*                 <a name="copies-deleteimages"></a>
#### Delete an image from a copy
```
DELETE /copies/{$id}/images/{$image_id}
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the Copy the
image belongs to
- **$image_id** - Required integer - The id of the image
to delete.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

*                 <a name="copies-patch"></a>
#### Update an existing copy
```
PATCH /copies/{$id}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **description** - string - Optional. Replace the
description.
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy to
update
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The updated thing.
</ul>
```

*                 <a name="copies-delete"></a>
#### Delete a copy
```
DELETE /copies/{$id}/
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- NONE
</ul>
```

*                 <a name="copies-postlikes"></a>
#### Like a copy
```
POST /copies/{$id}/likes
```
<p>Must use the POST method Result will be 404 Not Found if the copy
doesn't exist. Result will be 400 Bad Request if the user is trying to
like their own copy.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy to
like.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object.
</ul>
```

*                 <a name="copies-deletelikes"></a>
#### Delete a like
```
DELETE /copies/{$id}/likes
```
<p>Must use the DELETE method Result will be 404 Not Found if the copy
doesn't exist. Result will be 400 Bad Request if the user is trying to
"unlike" their own copy.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy to
"unlike".
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object.
</ul>
```

*                 <a name="copies-getthreadedcomments"></a>
#### Get all comments for this copy in a quick pre-threaded view. This is
an alternative to GET /copies/id/comments
```
GET /copies/{$id}/threadedcomments
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the thing to
get
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - An array containing comment threads
indexed by comment parent id (blank for top level comments) and users
indexed by user id used in those comments
</ul>
```

*                 <a name="copies-getcomments"></a>
#### Get an unthreaded paginated list of comment objects. See also GET
/copies/id/threaded_comments
```
GET /copies/{$id}/comments
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy to get
comments for
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array containing a list of comments on
this copy
</ul>
```

*                 <a name="copies-postcomments"></a>
#### Post a comment
```
POST /copies/{$id}/comments
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the copy to
comment on
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The newly created comment
</ul>
```

</ul>

*             <a name="collections"></a>
### Collections
<ul class="methods">
*                 <a name="collections-get"></a>
#### Get a collection by id
```
GET /collections/{$id}/
```
<p>If no id is given, gets the list of the latest collections.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Optional integer - The id of the collection to
get. Omit to get the latest collections.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object|array)** - An array of objects, or a single
object
</ul>
```

*                 <a name="collections-getthings"></a>
#### Get Things in a collection
```
GET /collections/{$id}/things
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the collection to
get Things from
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - An array of Things in this collection
</ul>
```

*                 <a name="collections-post"></a>
#### Create a new collection
```
POST /collections/
```
##### Body Parameters
```
<ul class="params unstyled">
- **name** - string - Name of the collection
- **description** - string - Optional. Description of the
collection
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The newly created collection.
</ul>
```

*                 <a name="collections-postthing"></a>
#### Add a thing to a collection
```
POST /collections/{$collection_id}/thing/{$thing_id}
```
<p>Apps can add to any collection the user owns. Do not abuse or we'll
change that. :)</p>
##### Body Parameters
```
<ul class="params unstyled">
- **description** - string - Optional. Reason for adding
the Thing
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$collection_id** - Required integer - Id of the
collection to add to
- **$thing_id** - Required integer - Id of the Thing to
add
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(The)** - "ok" object.
</ul>
```

*                 <a name="collections-deletething"></a>
#### Removes a thing from a collection
```
DELETE /collections/{$collection_id}/thing/{$thing_id}
```
<p>Apps may only remove things that they've added to a collection.</p>
##### Parameters
```
<ul class="params unstyled">
- **$collection_id** - Required -
- **$thing_id** - Required -
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(The)** - "ok" object.
</ul>
```

*                 <a name="collections-patch"></a>
#### Update a collection
```
PATCH /collections/{$id}/
```
<p>Apps can only update collections they've created.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **name** - string - Name of the collection
- **description** - string - Optional. Description of the
collection
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required -
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The newly created collection.
</ul>
```

*                 <a name="collections-delete"></a>
#### Delete a collection
```
DELETE /collections/{$id}/
```
<p>Apps can only delete collections they've created.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - Id of the collection to
delete
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- NONE
</ul>
```

</ul>

*             <a name="comments"></a>
### Comments
<ul class="methods">
*                 <a name="comments-get"></a>
#### Get comment by id
```
GET /comments/{$id}/
```
<p>If no id is given, gets the list of the latest comments.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the comment to
get
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - An object representing the comment
requested
</ul>
```

*                 <a name="comments-post"></a>
#### Create a new comment
```
POST /comments/
```
<p>Must use the POST method</p>
##### Body Parameters
```
<ul class="params unstyled">
- **body** - string - Set the body of the comment
- **target_type** - string - Either thing or make
- **target_id** - integer - The id of the target (thing_id
or make_id)
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The newly created comment.
</ul>
```

*                 <a name="comments-patch"></a>
#### Update an existing comment
```
PATCH /comments/{$id}/
```
<p>Must use the PATCH method.</p>
##### Body Parameters
```
<ul class="params unstyled">
- **body** - string - Replace the body of the thing
</ul>
```
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the comment to
update
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The updated comment.
</ul>
```

*                 <a name="comments-delete"></a>
#### Delete a comment
```
DELETE /comments/{$id}/
```
<p>Must use the DELETE method. This cannot be undone.</p>
##### Parameters
```
<ul class="params unstyled">
- **$id** - Required integer - The id of the comment to
delete.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object)** - The "ok" object
</ul>
```

</ul>

*             <a name="newest"></a>
### Newest
<ul class="methods">
*                 <a name="newest-get"></a>
#### Get the latest things published
```
GET /newest/
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Thing objects
</ul>
```

</ul>

*             <a name="popular"></a>
### Popular
<ul class="methods">
*                 <a name="popular-get"></a>
#### Get the latest featured things
```
GET /popular/
```
##### Returns
```
<ul class="returns unstyled">
- NONE
</ul>
```

</ul>

*             <a name="featured"></a>
### Featured
<ul class="methods">
*                 <a name="featured-get"></a>
#### Get the latest featured things
```
GET /featured/
```
##### Returns
```
<ul class="returns unstyled">
- NONE
</ul>
```

</ul>

*             <a name="search"></a>
### Search
<ul class="methods">
*                 <a name="search-get"></a>
#### Perform a search of things by keyword
```
GET /search/{$term}/
```
<p>Results in 404 Not Found if no things match the search.</p>
##### Parameters
```
<ul class="params unstyled">
- **$term** - Optional string - The search query to
perform
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - A list of things matching the search
</ul>
```

*                 <a name="search-getlibrary"></a>
```
GET /search/{$term}/library
```
##### Parameters
```
<ul class="params unstyled">
- **$term** - Optional -
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- NONE
</ul>
```

</ul>

*             <a name="categories"></a>
### Categories
<ul class="methods">
*                 <a name="categories-get"></a>
#### Get category or categories
```
GET /categories/{$category_slug}/
```
<p>Get details about one category or a list of all categories. Category
ids are normalized "slugs". For example, the id for the "Automotive"
category's id would be "automotive". The "Replacement Parts" category
would have an id of "replacement-parts", etc. If no id is specified,
returns paginated list of categories.</p>
##### Parameters
```
<ul class="params unstyled">
- **$category_slug** - Optional string - The id of the
category to fetch. Omit for list of categories.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object|array)** - The category (if specified) or list
of categories
</ul>
```

*                 <a name="categories-getthings"></a>
#### Get latest things in a category
```
GET /categories/{$category_slug}/things
```
<p>If the category doesn't exist, result is 404 Not Found. Category ids
are normalized "slugs". For example, the id for the "Automotive"
category's id would be "automotive". The "Replacement Parts" category
would have an id of "replacement-parts", etc.</p>
##### Parameters
```
<ul class="params unstyled">
- **$category_slug** - Required string - The id of the
category for which to fetch things
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Thing objects
</ul>
```

</ul>

*             <a name="tags"></a>
### Tags
<ul class="methods">
*                 <a name="tags-getthings"></a>
#### Get the latest things with the specified tag
```
GET /tags/{$tag}/things
```
<p>If the tag doesn't exist, result is 404 Not Found. Tags are normalized
before searching by converting whitespace to underscores and stripping
out all characters except alphanumerics, underscores, and dashes
('-').</p>
##### Parameters
```
<ul class="params unstyled">
- **$tag** - Required string - The tag for which to fetch
things
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(array)** - Thing objects
</ul>
```

*                 <a name="tags-get"></a>
#### Return a representation of the given tag
```
GET /tags/{$tag}/
```
<p>Tags are normalized before searching by converting whitespace to
underscores and stripping out all characters except alphanumerics,
underscores, and dashes ('-'). If no tag is specified, returns a list of
all tags in alphabetical order.</p>
##### Parameters
```
<ul class="params unstyled">
- **$tag** - Optional string - The tag for which to fetch
things. Omit this to get the list of tags.
</ul>
```
##### Returns
```
<ul class="returns unstyled">
- **(object|array)** - The tag or an array of tags.
</ul>
```

</ul>

</ul>
### Index
<ul class="nav nav-list">
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#users">USERS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#things">THINGS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#files">FILES</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#copies">COPIES</a>
- <a href=
"./Developers%20-%20REST%20API%20Reference%20-%20Thingiverse_files/Developers%20-%20REST%20API%20Reference%20-%20Thingiverse.html">
COLLECTIONS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#comments">COMMENTS</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#newest">NEWEST</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#popular">POPULAR</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#featured">FEATURED</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#search">SEARCH</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#categories">CATEGORIES</a>
- <a href=
"http://www.thingiverse.com/developers/rest-api-reference#tags">TAGS</a>
</ul>
</body>
</html>
